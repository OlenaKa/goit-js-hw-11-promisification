{"version":3,"sources":["webpack:///./js/task-1.js","webpack:///./js/task-2.js","webpack:///./js/task-3.js"],"names":["delay","ms","Promise","resolve","time","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","reject","id","logSuccess","logError","warn","amount","catch"],"mappings":"0HACMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAS,SAAAC,GAClB,IAAIC,EAAOH,EAEXI,YAAY,WACVF,EAAQC,KACPA,OAIDE,EAAS,SAAAF,GAAI,OAAIG,QAAQC,IAAR,kBAA8BJ,EAA9B,OAGvBJ,EAAM,KAAMS,KAAKH,GACjBN,EAAM,KAAMS,KAAKH,GACjBN,EAAM,MAAMS,KAAKH,G,kCChBXI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAElC,OAAO,IAAIb,SAAS,SAACC,GAIpBA,EAHqBW,EAASE,KAAI,SAAAC,GAAI,OACpCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAQ3DX,EAAS,SAAAY,GAAY,OAAIX,QAAQY,MAAMD,IAE7CL,EAAgBH,EAAO,SAASD,KAAKH,GACrCO,EAAgBH,EAAO,OAAOD,KAAKH,GCpBnC,IAIMc,EAAkB,SAACC,GACvB,IALiCC,EAAKC,EAKhCvB,GAL2BsB,EAKO,IALFC,EAKO,IAJtCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAMpD,OAAO,IAAIpB,SAAS,SAACC,EAAQwB,GAC1BtB,YAAW,WACSmB,KAAKE,SAAW,GAEnCvB,EAAQ,CAACyB,GAAIP,EAAYO,GAAIxB,KAAMJ,IAEnC2B,EAAON,EAAYO,MAEjB5B,OAKF6B,EAAa,SAAC,GAAe,IAAdD,EAAc,EAAdA,GAAIxB,EAAU,EAAVA,KACvBG,QAAQC,IAAR,eAA2BoB,EAA3B,iBAA8CxB,EAA9C,OAGI0B,EAAW,SAAAF,GACfrB,QAAQwB,KAAR,gCAA6CH,EAA7C,8BAIFR,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,KAC/BvB,KAAKoB,GACLI,MAAMH,GAETV,EAAgB,CAAEQ,GAAI,GAAII,OAAQ,MAC/BvB,KAAKoB,GACLI,MAAMH,K","file":"main.5d3d925b0d6305eaf0d5.js","sourcesContent":["\r\nconst delay = ms => {\r\n  return new Promise (resolve => {\r\n    let time = ms\r\n   \r\n    setTimeout (()=>{\r\n      resolve(time)\r\n    }, time)\r\n  })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n \r\n return new Promise ((resolve)=>{\r\n  const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n  );\r\n  resolve(updatedUsers);\r\n })\r\n  \r\n\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);\r\n\r\n","\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  const delay = randomIntegerFromInterval(200, 500);\r\n \r\n  return new Promise ((resolve,reject)=> { \r\n     setTimeout(() => {\r\n      const canProcess = Math.random() > 0.3;\r\n      if (canProcess) {\r\n      resolve({id: transaction.id, time: delay});\r\n      } else {\r\n      reject(transaction.id);\r\n      }\r\n     }, delay);\r\n  })\r\n \r\n};\r\n\r\nconst logSuccess = ({id, time}) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"],"sourceRoot":""}